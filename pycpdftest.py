import pycpdf

pycpdf.loadDLL("/home/john/python-libcpdf/libpycpdf.so")
#CHAPTER 0. Preliminaries
pycpdf.startup()
print('Library version is ' + pycpdf.version())
pycpdf.setFast()
pycpdf.setSlow()
print('LastError is ' + str(pycpdf.lastError()))
print('LastErrorString is ' + pycpdf.lastErrorString())
pycpdf.clearError()
pycpdf.onExit()

#CHAPTER 1. Basics
pdf = pycpdf.fromFile('cpdfmanual.pdf', '')
pdf2 = pycpdf.fromFileLazy('cpdfmanual.pdf', '')
pdf3 = pycpdf.fromMemory(data, length, '')
pdf4 = pycpdf.fromMemoryLazy(data, length, '')
pdf5 = pycpdf.blankDocument(200.0, 100.0, 50)
pdf6 = pycpdf.blankDocumentPaper(pycpdf.a3landscape, 50)
pycpdf.deletePdf(pdf)
pycpdf.replacePdf(pdf2, pdf3)
n = startEnumeratePDFs()
for x in range(n):
  print(pycpdf.enumeratePDFsKey(x), pycpdf.enumeratePDFsInfo(x))
endEnumeratePDFs()
print(pycpdf.ptOfCm(1.0))
print(pycpdf.ptOfMm(1.0))
print(pycpdf.ptOfIn(1.0))
print(pycpdf.cmOfPt(1.0))
print(pycpdf.mmOfPt(1.0))
print(pycpdf.inOfPt(1.0))
r = pycpdf.parsePagespec(pdf, "1-3,end")
valid = pycpdf.validatePagespec("1-4,5,6")
pagespecstr = pycpdf.stringOfPagespec(pdf, valid)
blankrange = pycpdf.blankRange()
pycpdf.deleteRange(blankrange)
fromto = pycpdf.range(3, 7)
rall = pycpdf.all(pdf4)
even = pycpdf.even(rall)
odd = pycpdf.odd(rall)
union = pycpdf.rangeUnion(even, odd)
difference = pycpdf.rangeDifference(even, odd)
nodeps = pycpdf.removeDuplicates(rall)
rangel = pycpdf.rangeLength(union)
got = pycpdf.rangeGet(odd, 1)
added = pycpdf.rangeAdd(odd, 9)
inrange = pycpdf.isInRange(odd, 1)
pages = pycpdf.pages(pdf5)
pagesf = pycpdf.pagesFast('cpdfmanual.pdf', '')
pycpdf.toFile(pdf, 'out.pdf', False, False)
pycpdf.toFileExt(pdf, 'out.pdf', False, False, False, False, False)
mem, memlength = pycpdf.toMemory(pdf5, False, False)
isenc = pycpdf.isEncrypted(pdf)
decrypted = pycpdf.decryptPdf(pdf, 'foo')
owner = pycpdf.decryptPdfOwner(pdf, 'foo')
pycpdf.toFileEncrypted(pdf, pycpdf.pdf40bit, [pycpdf.noEdit], 'owner', 'user', False, False, 'enc.pdf')
pycpdf.toFileEncryptedEnc(pdf, pycpdf.pdf40bit, [pycpdf.noEdit], 'owner', 'user', False, False, False, False, False, 'enc2.pdf')
hasperm = pycpdf.hasPermission(pdf, pycpdf.noEdit)
encmethod = pycpdf.encryptionKind(pdf)




